#!/usr/bin/env python
import MySQLdb,re,xlwt,sys,time,copy
from multiprocessing import Process

def mysql(sql):
    #import pdb;pdb.set_trace()
    dbhost = 'localhost'
    dbuser = 'root'
    dbpassword = '1qaz2wsx'
    db = 'coin'
    try:    
        sqlconnect = MySQLdb.connect(dbhost,dbuser,dbpassword,db)
        cursor = sqlconnect.cursor()
    except:
        print "Failed to connect database"
        sys.exit(1)
    try:
        if not re.search(',,,',sql):
            sql_lower = sql.lower()
            res = cursor.execute(sql)
            if 'insert' in sql_lower:
                res = int(sqlconnect.insert_id())                    
            elif 'select' in sql_lower or 'desc' in sql_lower:
                res = cursor.fetchall()
            sqlconnect.commit()
            return res
        else:
            output = []
            for i in sql.split(',,,'):
                sql_lower = i.lower()
                res = cursor.execute(i)
                if 'insert' in sql_lower:
                    res = int(sqlconnect.insert_id())
                elif 'select' in sql_lower:
                    res = cursor.fetchall()
                output.append(res)
            sqlconnect.commit()
            return output
    except Exception as e:
        print str(e)
        sqlconnect.close()
        sys.exit(1)
    finally:
        sqlconnect.close()


def getHighPair():
    #import pdb;pdb.set_trace()
    sql = 'select * from test;'
    ret = mysql(sql)
    datapair = {}
    for row in ret:
        bc = row[12]
        ex = row[11]
        qc = row[13]
        last = row[6]
        try:
            type(datapair[bc])
        except:
            datapair[bc] = {}
        try:
            type(datapair[bc][qc])
        except:
            datapair[bc][qc] = []
        price = round(last*(1-rate[ex]),float)
        source = [ex,bc]
        target = [ex,qc]
        datapair[bc][qc].append([price,source,target])
    for bc in datapair.keys():
        for qc in datapair[bc].keys():
            tmp = [i[0] for i in datapair[bc][qc]]
            datapair[bc][qc] = datapair[bc][qc][tmp.index(max(tmp))]
    return datapair
    
def getCoin(bit):
    if isinstance(bit,list):
        return bit[2].split('.')[1]
    else:
        return bit.split('.')[1]
        
def countPrice(way,bc,qc):
    if way[-2][0] == way[-1][0]:
        price = round(way[0] * datapair[bc][qc][0],float)
    else:
        price = round(way[0] * datapair[bc][qc][0] * (1-rate[way[-2][0]]),float)
    return price
    
def genWay(bc): 
    #import pdb;pdb.set_trace()
    way = []
    for qc in datapair[bc].keys():
        if datapair[bc][qc][2][1] not in basecurrency:
            way.append(datapair[bc][qc])
        else:
            #if getCoin(datapair[bc][qc]) in pricekey:
            way.append(datapair[bc][qc])
            for qc1 in datapair[qc].keys():
                tmp1 = copy.deepcopy(datapair[bc][qc])
                tmp1.append(datapair[qc][qc1][2])
                tmp1[0] = countPrice(tmp1,qc,qc1)
                if datapair[qc][qc1][2][1] not in basecurrency:
                    way.append(tmp1)
                else:
                    #if getCoin(datapair[qc][qc1]) in pricekey:
                    way.append(tmp1)
                    for qc2 in datapair[qc1].keys():
                        tmp2 = copy.deepcopy(tmp1)
                        tmp2.append(datapair[qc1][qc2][2])
                        tmp2[0] = countPrice(tmp2,qc1,qc2)
                        if datapair[qc1][qc2][2][1] not in basecurrency:
                            way.append(tmp2)
                        else:
                            #if getCoin(datapair[qc1][qc2]) in pricekey:
                            way.append(tmp2)
                            for qc3 in datapair[qc2].keys():
                                tmp3 = copy.deepcopy(tmp2)
                                tmp3.append(datapair[qc2][qc3][2])
                                tmp3[0] = countPrice(tmp3,qc2,qc3)
                                if datapair[qc2][qc3][2][1] not in basecurrency:
                                    way.append(tmp3)
                                else:
                                    #if getCoin(datapair[qc2][qc3]) in pricekey:
                                    way.append(tmp3)
                                    for qc4 in datapair[qc3].keys():
                                        tmp4 = copy.deepcopy(tmp3)
                                        tmp4.append(datapair[qc3][qc4][2])
                                        tmp4[0] = countPrice(tmp4,qc3,qc4)
                                        way.append(tmp4)
    #return way
    #import pdb;pdb.set_trace()
    for i in range(len(way)):
        firstbit = way[i][1][1]
        lastbit = way[i][-1][1]
        if firstbit in pricekey and lastbit in pricekey:
            way[i][0] = round(way[i][0]*dataprice[lastbit],float)
            way[i].append(dataprice[firstbit])
            profit = round((way[i][0]-way[i][-1])/way[i][-1],float)
            way[i].append(profit)
    return sorted(way,key=lambda tmp: tmp[0],reverse=True)[0:19]
    
    values = ''
    for i in sorted(way,key=lambda tmp: tmp[0],reverse=True)[0:19]:
        values += ",NULL,('%s','%s','%s')" % (bc,i[0],','.join(i[1:-2]))
    values = re.sub(r'^,','',values)
    sql = "insert into coindata_routes values %s;" % values
    mysql(sql)
    
    #dataway[bc] = way
    #print dataway.keys()
    

def getDataPrice():
    price = {}
    sql = "select * from coindata_price where createtime=(select max(createtime) from coindata_price);"
    ret = mysql(sql)
    pricekey = [i[0] for i in ret]
    pricevalue = [i[2] for i in ret]
    for i in range(len(pricekey)):
        price[pricekey[i]] = pricevalue[i]
    price['USD'] = 6.3492
    price['EUR'] = 7.57119
    price['JPY'] = 0.057744
    pricekey.append('USD')
    pricekey.append('EUR')
    pricekey.append('JPY')
    return pricekey,price
    
def main():
    global basecurrency,pricekey,dataprice,datapair
    pricekey,dataprice = getDataPrice()
    datapair = getHighPair()
    basecurrency = datapair.keys()
    for i in genWay('OMG'):
        print i
    sys.exit(1)
    
    print len(basecurrency)
    for bc in basecurrency:
        p = Process(target=genWay,args=(bc,))
        p.start()

if __name__ == '__main__':
    basecount = 1
    float = 13
    jump = 4
    pmax= 40
    rate = {"bitfinex":0.02,"hitbtc":0.02,"bittrex":0.01,"okex":0.02,"gateio":0.02,"cryptopia":0.02,"poloniex":0.02}
    main()